/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PhotoDevice } from "./PhotoDevice";
import { PhotoDeviceCountArgs } from "./PhotoDeviceCountArgs";
import { PhotoDeviceFindManyArgs } from "./PhotoDeviceFindManyArgs";
import { PhotoDeviceFindUniqueArgs } from "./PhotoDeviceFindUniqueArgs";
import { CreatePhotoDeviceArgs } from "./CreatePhotoDeviceArgs";
import { UpdatePhotoDeviceArgs } from "./UpdatePhotoDeviceArgs";
import { DeletePhotoDeviceArgs } from "./DeletePhotoDeviceArgs";
import { PhotoDeviceService } from "../photoDevice.service";
@graphql.Resolver(() => PhotoDevice)
export class PhotoDeviceResolverBase {
  constructor(protected readonly service: PhotoDeviceService) {}

  async _photoDevicesMeta(
    @graphql.Args() args: PhotoDeviceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PhotoDevice])
  async photoDevices(
    @graphql.Args() args: PhotoDeviceFindManyArgs
  ): Promise<PhotoDevice[]> {
    return this.service.photoDevices(args);
  }

  @graphql.Query(() => PhotoDevice, { nullable: true })
  async photoDevice(
    @graphql.Args() args: PhotoDeviceFindUniqueArgs
  ): Promise<PhotoDevice | null> {
    const result = await this.service.photoDevice(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PhotoDevice)
  async createPhotoDevice(
    @graphql.Args() args: CreatePhotoDeviceArgs
  ): Promise<PhotoDevice> {
    return await this.service.createPhotoDevice({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PhotoDevice)
  async updatePhotoDevice(
    @graphql.Args() args: UpdatePhotoDeviceArgs
  ): Promise<PhotoDevice | null> {
    try {
      return await this.service.updatePhotoDevice({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PhotoDevice)
  async deletePhotoDevice(
    @graphql.Args() args: DeletePhotoDeviceArgs
  ): Promise<PhotoDevice | null> {
    try {
      return await this.service.deletePhotoDevice(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
