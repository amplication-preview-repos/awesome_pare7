/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PhotoDeviceService } from "../photoDevice.service";
import { PhotoDeviceCreateInput } from "./PhotoDeviceCreateInput";
import { PhotoDevice } from "./PhotoDevice";
import { PhotoDeviceFindManyArgs } from "./PhotoDeviceFindManyArgs";
import { PhotoDeviceWhereUniqueInput } from "./PhotoDeviceWhereUniqueInput";
import { PhotoDeviceUpdateInput } from "./PhotoDeviceUpdateInput";

export class PhotoDeviceControllerBase {
  constructor(protected readonly service: PhotoDeviceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PhotoDevice })
  async createPhotoDevice(
    @common.Body() data: PhotoDeviceCreateInput
  ): Promise<PhotoDevice> {
    return await this.service.createPhotoDevice({
      data: data,
      select: {
        brand: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        price: true,
        releaseDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PhotoDevice] })
  @ApiNestedQuery(PhotoDeviceFindManyArgs)
  async photoDevices(@common.Req() request: Request): Promise<PhotoDevice[]> {
    const args = plainToClass(PhotoDeviceFindManyArgs, request.query);
    return this.service.photoDevices({
      ...args,
      select: {
        brand: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        price: true,
        releaseDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PhotoDevice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async photoDevice(
    @common.Param() params: PhotoDeviceWhereUniqueInput
  ): Promise<PhotoDevice | null> {
    const result = await this.service.photoDevice({
      where: params,
      select: {
        brand: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        price: true,
        releaseDate: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PhotoDevice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePhotoDevice(
    @common.Param() params: PhotoDeviceWhereUniqueInput,
    @common.Body() data: PhotoDeviceUpdateInput
  ): Promise<PhotoDevice | null> {
    try {
      return await this.service.updatePhotoDevice({
        where: params,
        data: data,
        select: {
          brand: true,
          createdAt: true,
          description: true,
          id: true,
          name: true,
          price: true,
          releaseDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PhotoDevice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePhotoDevice(
    @common.Param() params: PhotoDeviceWhereUniqueInput
  ): Promise<PhotoDevice | null> {
    try {
      return await this.service.deletePhotoDevice({
        where: params,
        select: {
          brand: true,
          createdAt: true,
          description: true,
          id: true,
          name: true,
          price: true,
          releaseDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
