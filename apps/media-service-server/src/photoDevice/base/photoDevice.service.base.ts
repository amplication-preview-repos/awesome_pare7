/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, PhotoDevice as PrismaPhotoDevice } from "@prisma/client";

export class PhotoDeviceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PhotoDeviceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.photoDevice.count(args);
  }

  async photoDevices(
    args: Prisma.PhotoDeviceFindManyArgs
  ): Promise<PrismaPhotoDevice[]> {
    return this.prisma.photoDevice.findMany(args);
  }
  async photoDevice(
    args: Prisma.PhotoDeviceFindUniqueArgs
  ): Promise<PrismaPhotoDevice | null> {
    return this.prisma.photoDevice.findUnique(args);
  }
  async createPhotoDevice(
    args: Prisma.PhotoDeviceCreateArgs
  ): Promise<PrismaPhotoDevice> {
    return this.prisma.photoDevice.create(args);
  }
  async updatePhotoDevice(
    args: Prisma.PhotoDeviceUpdateArgs
  ): Promise<PrismaPhotoDevice> {
    return this.prisma.photoDevice.update(args);
  }
  async deletePhotoDevice(
    args: Prisma.PhotoDeviceDeleteArgs
  ): Promise<PrismaPhotoDevice> {
    return this.prisma.photoDevice.delete(args);
  }
}
